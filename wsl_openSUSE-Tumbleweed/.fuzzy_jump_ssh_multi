#!/bin/bash


jump_ssh () {
    local connectName
    if [[ "$#" -lt 2 || "$#" -gt 3 ]]; then
        echo "Usage: olympus_con <olympus OR pulsar> <Router FQDN or IP OR Nickname if available> <New Nickname (optional)>"
        return 1
    fi
    local jumpServer="$1"
    if [[
            "$jumpServer" != "olympus.srv.prnynj.alticeusa.net" &&
            "$jumpServer" != "pulsar2.suddenlink.net"
    ]]; then
        echo "Invalid jump server. Must be either 'olympus.srv.prnynj.alticeusa.net' or 'pulsar2.suddenlink.net'"
        return 1
    fi
    if [[ "$jumpServer" =~ "olympus" ]]; then
        if [[ ! -f "$HOME/.connections/.olympuspasswd.gpg" ]]; then
            echo "Password file for olympus not found"
            return 1
        fi
    else
        if [[ ! -f "$HOME/.connections/.pulsarpasswd.gpg" ]]; then
            echo "Password file for pulsar not found"
            return 1
        fi
    fi
    if [[ ! -f "$HOME/.connections/.tacacspasswd.gpg" ]]; then
        echo "Password file for tacacs not found"
        return 1
    fi
    echo "Jumpserver set to $jumpServer"
    local ipOrDns="$2"
    if [[ -z "$3" ]]; then
        local name="$ipOrDns"
    else
        local name="$3"
    fi
    if [[ ! -f "$HOME/.connections/$jumpServer" ]]; then
        mkdir -p "$HOME/.connections"
        touch "$HOME/.connections/$jumpServer"
    fi
    if grep -q "^$name\\s$ipOrDns$" "$HOME/.connections/$jumpServer"; then
        echo "Connection entry exists!"
        connectName=$ipOrDns
    elif grep -q "$name\\s" "$HOME/.connections/$jumpServer"; then
        echo "Connection entry exists!"
        local entryArray=($(grep -e "^$name\\s" -e "\\s$name$" "$HOME/.connections/$jumpServer"))
        local nameInFile=${entryArray[0]}
        local ipInFile=${entryArray[1]}
        if [[ "$nameInFile" == "$ipInFile" ]]; then
            connectName=$nameInFile
        else
            connectName=$ipInFile
        fi
    else
        local ipRegex="^(([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))\.){3}([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))$"
        if [[ $ipOrDns =~ $ipRegex ]]; then
            if grep -q "\\s$ipOrDns$" "$HOME/.connections/$jumpServer"; then
                echo "Connection entry exists!"
                local nameInFile=$(grep -oP "^.*(?= $ipOrDns$)" "$HOME/.connections/$jumpServer")
                echo "$ipOrDns is already associated with the name '$nameInFile'. Do you want to overwrite it with '$name'?"
                select ync in "Yes" "No" "Cancel"; do
                    case $ync in
                        Yes ) sed -i "s/$nameInFile $ipOrDns/$name $ipOrDns/" "$HOME/.connections/$jumpServer"; echo "Connection entry name changed"; break;;
                        No ) echo "Connection entry left alone"; break;;
                        Cancel ) return 1;;
                        * ) echo "Please answer 1 for Yes, 2 for No, or 3 for Cancel";;
                    esac
                done
            else
                echo "Connection entry does not exist."
                if [[ "$name" == "$ipOrDns" ]]; then
                    echo "Adding $name to connection list"
                else
                    echo "Adding $name($ipOrDns) to connection list"
                fi
                echo "$name $ipOrDns" >> "$HOME/.connections/$jumpServer"
            fi
            connectName=$ipOrDns
        else
            local cvSuffix=".cv.net"
            local stripCvSuffix=${name%"$cvSuffix"}
            local cvName="$stripCvSuffix$cvSuffix"
            local alticeSuffix=".alticeusa.net"
            local stripAlticeSuffix=${name%"$alticeSuffix"}
            local alticeName="$stripAlticeSuffix$alticeSuffix"
            if grep -q "$cvName\\s" "$HOME/.connections/$jumpServer"; then
                echo "Connection entry exists!"
                connectName=$cvName
            elif grep -q "$alticeName\\s" "$HOME/.connections/$jumpServer"; then
                echo "Connection entry exists!"
                connectName=$alticeName
            else
                echo "Connection entry does not exist."
                if nslookup "$cvName" > /dev/null; then
                    echo "DNS entry found for $cvName"
                    echo "Adding $cvName to connection list"
                    echo "$cvName $cvName" >> "$HOME/.connections/$jumpServer"
                    connectName=$cvName
                elif nslookup "$alticeName" > /dev/null; then
                    echo "DNS entry found for $alticeName"
                    echo "Adding $alticeName to connection list"
                    echo "$alticeName $alticeName" >> "$HOME/.connections/$jumpServer"
                    connectName=$alticeName
                else
                    echo "Neither $cvName or $alticeName are valid DNS names"
                    return 1
                fi
            fi
        fi
    fi

    local entryArray=($(grep "$connectName" "$HOME/.connections/$jumpServer"))
    local connectName=${entryArray[0]}
    local connectIp=${entryArray[1]}
    local windowName=$connectName
    local cvSuffix=".cv.net"
    local stripCvSuffix=${connectName%"$cvSuffix"}
    local alticeSuffix=".alticeusa.net"
    local connectName=${stripCvSuffix%"$alticeSuffix"}
    if [[ "$connectName" == "$connectIp" ]]; then
        echo "Connecting to $connectName through $jumpServer"
    else
        echo "Connecting to $connectName($connectIp) through $jumpServer"
        connectName=$connectIp
    fi
    if [[ "$jumpServer" =~ "olympus" ]]; then
        local olympusPass=$(gpg -d -q "$HOME/.connections/.olympuspasswd.gpg")
        local tacacsPass=$(gpg -d -q "$HOME/.connections/.tacacspasswd.gpg")
        if [[ -n "$TMUX" ]]; then
            tmux new-window -n "$windowName" "sshpass -p $olympusPass ssh -t bgorgani@$jumpServer \"sshpass -p $tacacsPass ssh bgorgani@$connectName\";bash -i"
            if [[ "$?" -ne 0 ]]; then
                tmux new-window -n "$windowName" "sshpass -p $olympusPass ssh -t bgorgani@$jumpServer \"ssh bgorgani@$connectName\";bash -i"
            fi
        else
            sshpass -p "$olympusPass" ssh -t bgorgani@"$jumpServer" "sshpass -p \"$tacacsPass\" ssh bgorgani@$connectName"
            if [[ "$?" -ne 0 ]]; then
                sshpass -p "$olympusPass" ssh -t bgorgani@$jumpServer "ssh bgorgani@$connectName"
            fi
        fi
    else
        local pulsarPass=$(gpg -d -q "$HOME/.connections/.pulsarpasswd.gpg")
        if [[ -n "$TMUX" ]]; then
            tmux new-window -n "$windowName" "sshpass -p $pulsarPass ssh -oKexAlgorithms=+diffie-hellman-group-exchange-sha1 \
                -oHostKeyAlgorithms=+ssh-dss -t bgorgani@$jumpServer \"ssh bgorgani@$connectName\";bash -i"
        else
            sshpass -p "$pulsarPass" ssh -oKexAlgorithms=+diffie-hellman-group-exchange-sha1 \
                -oHostKeyAlgorithms=+ssh-dss -t bgorgani@$jumpServer "ssh bgorgani@$connectName"
        fi
    fi
}

sanitize_and_connect () {
    local jumpServer="$1"
    local selections=("$@")
    for i in "${!selections[@]}"; do
        if [[ "${selections[$i]}" != "$jumpServer" ]]; then
            new_selections+=("${selections[$i]}")
        fi
    done
    selections=("${new_selections[@]}")
    local sanitizedSelections=()
    if [[ -z "${selections[@]}" ]]; then
        echo "No entry selected"
        return 1
    fi
    if [[ "${#selections[@]}" -eq 1 ]]; then
        sanitizedSelections=("${selections[0]}:${selections[0]}")
    elif [[ "${#selections[@]}" -eq 2 ]]; then
        if grep -q "${selections[0]}" "$HOME/.connections/$jumpServer" &&
            grep -q "${selections[1]}" "$HOME/.connections/$jumpServer"; then
            local entryArray1=($(grep "${selections[0]}" "$HOME/.connections/$jumpServer"))
            local entryArray2=($(grep "${selections[1]}" "$HOME/.connections/$jumpServer"))
            sanitizedSelections=("${entryArray1[0]}:${entryArray1[1]}" "${entryArray2[0]}:${entryArray2[1]}")
        else
            sanitizedSelections=("${selections[0]}:${selections[1]}")
        fi
    elif [[ "${#selections[@]}" -gt 2 ]]; then
        for i in "${selections[@]}"; do
            if [[ -n "$i" ]]; then
                if grep -q "$i" "$HOME/.connections/$jumpServer"; then
                    local entryArray=($(grep "$i" "$HOME/.connections/$jumpServer"))
                    sanitizedSelections+=("${entryArray[0]}:${entryArray[1]}")
                fi
            fi
        done
    fi
    local uniqSelection=($(printf "%s\n" "${sanitizedSelections[@]}" | uniq))
    for entry in "${uniqSelection[@]}"; do
        local name
        local ip
        IFS=':' read -r name ip <<< "$entry"
        jump_ssh "$jumpServer" "$ip" "$name"
    done
}

fjs () {
    if [[
            ! -d "$HOME/.connections/olympus.srv.prnynj.alticeusa.net" ||
            ! -d "$HOME/.connections/pulsar2.suddenlink.net"
    ]]; then
        mkdir -p "$HOME/.connections"
        touch "$HOME/.connections/olympus.srv.prnynj.alticeusa.net"
        touch "$HOME/.connections/pulsar2.suddenlink.net"
    fi
    local jumpServer=$(
        printf "olympus.srv.prnynj.alticeusa.net\npulsar2.suddenlink.net" |
        fzf --prompt="Choose a jump server: " --preview="cat $HOME/.connections/{}"
    )
    if [[ -z "$jumpServer" ]]; then
        echo "No jump server selected"
        return 1
    fi
    local selection=$(printf "Connect\nChange entry\nDelete entry" | fzf --prompt="Choose an action: " --preview="cat $HOME/.connections/$jumpServer")
    case $selection in
        "Connect" )
            local selectionArray=(
                $(
                    awk '{ if ($1 != $2) print $1, $2; else print $1 }' "$HOME/.connections/$jumpServer" |
                    fzf -m --ansi --print-query --prompt="Connect to: " \
                    --preview="echo {} | awk '{print \$1}' | xargs dig " \
                    --header="To create a new entry, type the FQDN or IP address and press enter
Alternatively, you can enter a Nickname followed by an IP address"
                )
            )
            sanitize_and_connect "$jumpServer" "${selectionArray[@]}"
            ;;
        "Change entry" )
            local entryArray=(
                $(
                    cat -p "$HOME/.connections/$jumpServer" |
                    fzf --ansi --prompt="Change entry: "
                )
            )
            if [[ -z "${entryArray[@]}" ]]; then
                echo "No entry selected"
                return 1
            fi
            local name=${entryArray[0]}
            local ip=${entryArray[1]}
            echo "Current entry: $name($ip)"
            echo "Enter new name (press enter to leave unchanged):"
            read newName
            if [[ -z "$newName" ]]; then
                newName=$name
            fi
            echo "Enter new IP (press enter to leave unchanged):"
            read newIp
            if [[ -z "$newIp" ]]; then
                newIp=$ip
            fi
            if [[ "$newName" == "$name" && "$newIp" == "$ip" ]]; then
                echo "No changes made"
            else
                sed -i "s/$name $ip/$newName $newIp/" "$HOME/.connections/$jumpServer"
                echo "Entry changed to $newName($newIp)"
            fi
            ;;
        "Delete entry" )
            local entryArray=(
                $(
                    cat -p "$HOME/.connections/$jumpServer" |
                    fzf --ansi --prompt="Delete entry: "
                )
            )
            if [[ -z "${entryArray[@]}" ]]; then
                echo "No entry selected"
                return 1
            fi
            local name=${entryArray[0]}
            local ip=${entryArray[1]}
            echo "Current entry: $name($ip)"
            echo "Are you sure you want to delete this entry?"
            select ync in "Yes" "No"; do
                case $ync in
                    Yes ) sed -i "/$name $ip/d" "$HOME/.connections/$jumpServer"; echo "Entry deleted"; break;;
                    No ) echo "Entry left alone"; break;;
                    * ) echo "Please answer 1 for Yes or 2 for No";;
                esac
            done
            ;;
    esac
}

export GPG_TTY=$(tty)
fjs
